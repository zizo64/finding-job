{"ast":null,"code":"import { createStore, combineReducers, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport { myReducer } from \"./reducer\";\nimport { postRedeucer } from \"./reducer\";\nconst reducers = combineReducers({\n  plus: myReducer,\n  post: postRedeucer\n});\nconst middleware = [thunk];\nconst data = localStorage.getItem(\"post\") ? JSON.parse(localStorage.getItem(\"post\")) : [];\nconst initialState = {\n  post: {\n    post: data,\n    loading: false,\n    error: \"\"\n  }\n};\nconst store = createStore(reducers, initialState, applyMiddleware(...middleware));\nexport default store;","map":{"version":3,"sources":["C:/Users/Omid/Desktop/post+redux+edit+localStorage/src/store.js"],"names":["createStore","combineReducers","applyMiddleware","thunk","composeWithDevTools","myReducer","postRedeucer","reducers","plus","post","middleware","data","localStorage","getItem","JSON","parse","initialState","loading","error","store"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,eAAvC,QAA8D,OAA9D;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,SAASC,SAAT,QAA0B,WAA1B;AACA,SAASC,YAAT,QAA6B,WAA7B;AACA,MAAMC,QAAQ,GAAGN,eAAe,CAAC;AAC/BO,EAAAA,IAAI,EAAEH,SADyB;AAE/BI,EAAAA,IAAI,EAAEH;AAFyB,CAAD,CAAhC;AAIA,MAAMI,UAAU,GAAG,CAACP,KAAD,CAAnB;AACA,MAAMQ,IAAI,GAAGC,YAAY,CAACC,OAAb,CAAqB,MAArB,IACTC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAX,CADS,GAET,EAFJ;AAGA,MAAMG,YAAY,GAAG;AACnBP,EAAAA,IAAI,EAAE;AAAEA,IAAAA,IAAI,EAAEE,IAAR;AAAcM,IAAAA,OAAO,EAAE,KAAvB;AAA8BC,IAAAA,KAAK,EAAE;AAArC;AADa,CAArB;AAGA,MAAMC,KAAK,GAAGnB,WAAW,CACvBO,QADuB,EAEvBS,YAFuB,EAGvBd,eAAe,CAAC,GAAGQ,UAAJ,CAHQ,CAAzB;AAMA,eAAeS,KAAf","sourcesContent":["import { createStore, combineReducers, applyMiddleware } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport { myReducer } from \"./reducer\";\r\nimport { postRedeucer } from \"./reducer\";\r\nconst reducers = combineReducers({\r\n  plus: myReducer,\r\n  post: postRedeucer,\r\n});\r\nconst middleware = [thunk];\r\nconst data = localStorage.getItem(\"post\")\r\n  ? JSON.parse(localStorage.getItem(\"post\"))\r\n  : [];\r\nconst initialState = {\r\n  post: { post: data, loading: false, error: \"\" },\r\n};\r\nconst store = createStore(\r\n  reducers,\r\n  initialState,\r\n  applyMiddleware(...middleware)\r\n);\r\n\r\nexport default store;\r\n"]},"metadata":{},"sourceType":"module"}