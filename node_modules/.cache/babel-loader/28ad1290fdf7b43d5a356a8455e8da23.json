{"ast":null,"code":"import axios from \"axios\";\nexport const jobData = () => async (dispatch, getState) => {\n  try {\n    const {\n      data\n    } = await axios.get(\"https://jabama-devjobs-api.vercel.app/api/v1/jobs/\");\n    const jobresult = data.result;\n    const jobdata = jobresult.items; // localStorage.setItem(\"products\", JSON.stringify(data));\n\n    dispatch({\n      type: \"get_job_succes\",\n      payload: [...jobdata]\n    });\n  } catch (error) {\n    console.log(error.message);\n    dispatch({\n      type: \"get_job_failed\",\n      payload: error.message\n    });\n  }\n};\nexport const searchFulltime = (search1, search2) => async (dispatch, getState) => {\n  const help = getState().job.product;\n  const filtered = help.filter(obj => {\n    return obj.contract === 'Full Time';\n  });\n  console.log(filtered);\n  const filtered1 = filtered.filter(obj => {\n    return obj.location.toLowerCase().includes(search2);\n  });\n  console.log(filtered1);\n  const filtered2 = filtered1.filter(obj => {\n    return obj.position.toLowerCase().includes(search1) || obj.company.toLowerCase().includes(search1);\n  });\n  console.log(filtered2);\n  dispatch({\n    type: \"search\",\n    payload: filtered2\n  });\n};\nexport const searchData = (search1, search2) => async (dispatch, getState) => {\n  const help = getState().job.product;\n  const filtered = help;\n  console.log(filtered);\n  const filtered1 = filtered.filter(obj => {\n    return obj.location.toLowerCase().includes(search2);\n  });\n  console.log(filtered1);\n  const filtered2 = filtered1.filter(obj => {\n    return obj.position.toLowerCase().includes(search1) || obj.company.toLowerCase().includes(search1);\n  });\n  console.log(filtered2);\n  dispatch({\n    type: \"search\",\n    payload: filtered2\n  });\n}; // export const basketAction = (basket) => (dispatch, getState) => {\n//   const name= getState().eachproduct.name\n//   const price= getState().eachproduct.price\n//   const countInStock= (getState().eachproduct.countInStock)-1\n//   const qty = 1\n//   const product= getState().eachproduct._id\n//   const image= getState().eachproduct.image\n//   const help={name,price,countInStock,product,image,qty}\n//   dispatch({ type: \"basket\", payload: [...basket,help] });\n// };\n// export const getNumber = () => (dispatch, getState) => {\n//   const x=getState().basket.length\n//   var num=0;\n//   for(let i=0;i<x;i++){\n//   var y = getState().basket[i].qty\n//   num = num+y\n//   };\n//   dispatch({ type: \"totalNumber\", payload: num });\n// };\n// export const getPrice = () => (dispatch, getState) => {\n//   const x=getState().basket.length\n//   var price=0;\n//   for(let i=0;i<x;i++){\n//   var y = getState().basket[i].price\n//   var z = getState().basket[i].qty\n//   price = price+y*z\n//   };\n//   dispatch({ type: \"totalprice\", payload: price });\n// };\n// export const deleteItem = (index) => (dispatch, getState) => {\n//   const help= getState().basket\n//   help.splice(index,1)\n//   dispatch({ type: \"deleteItem\", payload: [...help] });\n// };\n// export const plusItem = (basket,index) => (dispatch, getState) => {\n//   basket[index].qty=basket[index].qty+1\n//   dispatch({ type: \"plus\", payload: [...basket] });\n// };\n// export const minusItem = (basket,index) => (dispatch, getState) => {\n//   basket[index].qty=basket[index].qty-1\n//   dispatch({ type: \"minus\", payload: [...basket] });\n// };\n// export const availableItem = (basket,index) => (dispatch, getState) => {\n//   basket[index].countInStock = (getState().eachproduct.countInStock) -(basket[index].qty)+1\n//   dispatch({ type: \"available\", payload: [...basket] });\n// };\n// export const addressAction = (address,city,postalcode,phone) => (dispatch, getState) => {\n//   dispatch({ type: \"address\", payload: {address,city,postalcode,phone} });\n// };\n\nexport const emptyFilter = () => (dispatch, getState) => {\n  dispatch({\n    type: \"emptyFilter\",\n    payload: []\n  });\n}; // export const emptyNumber = () => (dispatch, getState) => {\n//   dispatch({ type: \"emptynumber\", payload: 0 });\n// };\n// export const emptyPrice = () => (dispatch, getState) => {\n//   dispatch({ type: \"emptyprice\", payload: 0 });\n// };\n// export const logoutUser = () => (dispatch, getState) => {\n//   dispatch({ type: \"logout-user\", payload: {} });\n// };","map":{"version":3,"sources":["D:/final project/src/action.js"],"names":["axios","jobData","dispatch","getState","data","get","jobresult","result","jobdata","items","type","payload","error","console","log","message","searchFulltime","search1","search2","help","job","product","filtered","filter","obj","contract","filtered1","location","toLowerCase","includes","filtered2","position","company","searchData","emptyFilter"],"mappings":"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","sourcesContent":["\r\nimport axios from \"axios\";\r\nexport const jobData = () => async (dispatch, getState) => {\r\n  try {\r\n    const { data } = await axios.get(\r\n      \"https://jabama-devjobs-api.vercel.app/api/v1/jobs/\"\r\n    );\r\n    const jobresult=data.result\r\n    const jobdata=jobresult.items\r\n    // localStorage.setItem(\"products\", JSON.stringify(data));\r\n    dispatch({ type: \"get_job_succes\", payload: [...jobdata] });\r\n  } catch (error) {\r\n    console.log(error.message);\r\n    dispatch({ type: \"get_job_failed\", payload: error.message });\r\n  }\r\n};\r\nexport const searchFulltime = (search1,search2) => async (dispatch, getState) => {\r\n  const help=getState().job.product\r\n  const filtered = help.filter(obj => {\r\n    return obj.contract === 'Full Time';\r\n  })       \r\n      console.log(filtered)\r\n      const filtered1 = filtered.filter(obj => {\r\n        return (obj.location).toLowerCase().includes(search2) \r\n      }); \r\n      console.log(filtered1) \r\n      const filtered2 = filtered1.filter(obj => {\r\n        return (obj.position).toLowerCase().includes(search1) ||(obj.company).toLowerCase().includes(search1)\r\n      });   \r\n      console.log(filtered2) \r\n  dispatch({ type: \"search\", payload: filtered2});\r\n};\r\n\r\nexport const searchData = (search1,search2) => async (dispatch, getState) => {\r\n  const help=getState().job.product\r\n  const filtered = help     \r\n      console.log(filtered)\r\n      const filtered1 = filtered.filter(obj => {\r\n        return (obj.location).toLowerCase().includes(search2) \r\n      }); \r\n      console.log(filtered1) \r\n      const filtered2 = filtered1.filter(obj => {\r\n        return (obj.position).toLowerCase().includes(search1) ||(obj.company).toLowerCase().includes(search1)\r\n      });   \r\n      console.log(filtered2) \r\n  dispatch({ type: \"search\", payload: filtered2});\r\n};\r\n\r\n\r\n\r\n// export const basketAction = (basket) => (dispatch, getState) => {\r\n//   const name= getState().eachproduct.name\r\n//   const price= getState().eachproduct.price\r\n//   const countInStock= (getState().eachproduct.countInStock)-1\r\n//   const qty = 1\r\n//   const product= getState().eachproduct._id\r\n//   const image= getState().eachproduct.image\r\n//   const help={name,price,countInStock,product,image,qty}\r\n//   dispatch({ type: \"basket\", payload: [...basket,help] });\r\n// };\r\n// export const getNumber = () => (dispatch, getState) => {\r\n//   const x=getState().basket.length\r\n//   var num=0;\r\n//   for(let i=0;i<x;i++){\r\n//   var y = getState().basket[i].qty\r\n//   num = num+y\r\n//   };\r\n//   dispatch({ type: \"totalNumber\", payload: num });\r\n// };\r\n// export const getPrice = () => (dispatch, getState) => {\r\n//   const x=getState().basket.length\r\n//   var price=0;\r\n//   for(let i=0;i<x;i++){\r\n//   var y = getState().basket[i].price\r\n//   var z = getState().basket[i].qty\r\n//   price = price+y*z\r\n//   };\r\n//   dispatch({ type: \"totalprice\", payload: price });\r\n// };\r\n\r\n// export const deleteItem = (index) => (dispatch, getState) => {\r\n//   const help= getState().basket\r\n//   help.splice(index,1)\r\n//   dispatch({ type: \"deleteItem\", payload: [...help] });\r\n// };\r\n// export const plusItem = (basket,index) => (dispatch, getState) => {\r\n//   basket[index].qty=basket[index].qty+1\r\n//   dispatch({ type: \"plus\", payload: [...basket] });\r\n// };\r\n// export const minusItem = (basket,index) => (dispatch, getState) => {\r\n//   basket[index].qty=basket[index].qty-1\r\n//   dispatch({ type: \"minus\", payload: [...basket] });\r\n// };\r\n// export const availableItem = (basket,index) => (dispatch, getState) => {\r\n//   basket[index].countInStock = (getState().eachproduct.countInStock) -(basket[index].qty)+1\r\n//   dispatch({ type: \"available\", payload: [...basket] });\r\n// };\r\n// export const addressAction = (address,city,postalcode,phone) => (dispatch, getState) => {\r\n//   dispatch({ type: \"address\", payload: {address,city,postalcode,phone} });\r\n// };\r\nexport const emptyFilter = () => (dispatch, getState) => {\r\n  dispatch({ type: \"emptyFilter\", payload: [] });\r\n};\r\n// export const emptyNumber = () => (dispatch, getState) => {\r\n//   dispatch({ type: \"emptynumber\", payload: 0 });\r\n// };\r\n// export const emptyPrice = () => (dispatch, getState) => {\r\n//   dispatch({ type: \"emptyprice\", payload: 0 });\r\n// };\r\n// export const logoutUser = () => (dispatch, getState) => {\r\n//   dispatch({ type: \"logout-user\", payload: {} });\r\n// };"]},"metadata":{},"sourceType":"module"}